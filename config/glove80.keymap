
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly. (I do)
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LBASE 0
#define LGAMING 1
#define LNAV 2
#define LNUM 3
#define LSYM 4
#define LMAGIC 5
// #define LMOUSE 3
// #define LMEDIA 4
// #define LFUNC 7

/* Custom Device-tree */
/* Glove80 system behavior & macros */
/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

#define LEFT_HAND_KEYS                                \
      0  1  2  3  4                                  \
     10 11 12 13 14 15                               \
     22 23 24 25 26 27                               \
     34 35 36 37 38 39                               \
     46 47 48 49 50 51                               \
     64 65 66 67 68
#define RIGHT_HAND_KEYS                              \
                                       5  6  7  8  9 \
                                   16 17 18 19 20 21 \
                                   28 29 30 31 32 33 \
                                   40 41 42 43 44 45 \
                                   58 59 60 61 62 63 \
                                      75 76 77 78 79
#define THUMB_KEYS                                   \
                    69 52       57 74                \
                     70 53     56 73                 \
                      71 54   55 72

    /* Custom Defined Behaviors */
/ {
    behaviors {
        hrm_i: hrm_i {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_I";
            #binding-cells = <2>;
            flavor = "balanced"
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            #binding-cells = <2>;
            flavor = "tap-preferred"
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        ltp: ltp {
            compatible = "zmk,behavior-hold-tap";
            label = "LTP";
            #binding-cells = <2>;
            flavor = "balanced"
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
        };

        tdcaps: tdcaps {
            compatible = "zmk,behavior-tap-dance";
            label = "TDCAPS";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&caps_word>, <&kp CAPS>;
        };
    }
    
};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
               &kp F1          &kp F2           &kp F3           &kp F4              &kp F5                                                                                                            &kp F6           &kp F7          &kp F8          &kp F9       &kp F10
                &none          &kp N1           &kp N2           &kp N3              &kp N4  &kp N5                                                                                   &kp N6           &kp N7           &kp N8          &kp N9          &kp N0       &kp F11
                &none         &kp SQT        &kp COMMA          &kp DOT               &kp P   &kp Y                                                                                    &kp F            &kp G            &kp C           &kp R           &kp L       &kp F12
              &tdcaps     &hrm LGUI A      &hrm LALT O     &hrm LCTRL E      &hrm_i LSHFT U   &kp I                                                                                    &kp D   &hrm_i RSHFT H     &hrm RCTRL T     &hrm RALT N     &hrm RGUI S   &key_repeat
                &none       &kp SLASH            &kp Q            &kp J               &kp K   &kp X          &kp ESC &kp LBRC &kp LBKT      &kp RBKT   &kp RBRC     &ltp LSYM DEL      &kp B            &kp M            &kp W           &kp V           &kp Z         &none
 &magic LAYER_Magic 0           &none            &none            &none               &none          &ltp LNAV SPACE  &kp TAB &kp LPAR      &kp RPAR    &kp RET    &ltp LNUM BSPC                       &none            &none           &none           &none   &to LGAMING
            >;
        };

        layer_gaming {
            bindings = <
                &kp F1     &kp F2  &kp F3 &kp F4 &kp F5                                                                    &none  &none  &none  &none  &none
                &kp N5    &kp ESC  &kp N1 &kp N2 &kp N3 &kp N4                                                      &none  &none  &none  &none  &none  &none
                &kp N6    &kp TAB  &kp Q  &kp W  &kp E   &kp R                                                      &none  &none  &none  &none  &none  &none
                &kp N7  &kp LSHFT  &kp A  &kp S  &kp D   &kp F                                                      &none  &none  &none  &none  &none  &none
                &kp N8  &kp LCTRL  &kp Z  &kp X  &kp C   &kp V         &kp V  &kp T  &kp N9 &none  &none  &none     &none  &none  &none  &none  &none  &none
 &magic LAYER_Magic 0    &kp LALT  &kp Z  &kp X  &kp C             &kp SPACE  &kp G  &kp N0 &none  &none  &none            &none  &none  &none  &none  &to LBASE
            >;
        };
        layer_nav {
            bindings = <
                &none    &none     &none     &none     &none                                                                        &none     &none     &none      &none  &none
                &none    &none     &none     &none     &none  &none                                                       &none     &none     &none     &none      &none  &none
                &none    &none &kp LC(X) &kp LC(C) &kp LC(V)  &none                                                       &none     &none     &none     &none      &none  &none
                &none &kp LGUI  &kp LALT &kp LCTRL &kp LSHFT  &none                                                       &none  &kp LEFT  &kp DOWN    &kp UP  &kp RIGHT  &none
                &none    &none     &none     &none     &none  &none     &none  &none  &none  &none    &none   &kp DEL     &none  &kp HOME &kp PG_UP &kp PG_DN    &kp END  &none
 &magic LAYER_Magic 0    &none     &none     &none     &none            &none  &none  &none  &none  &kp RET  &kp BSPC               &none     &none     &none      &none  &none
            >;
        };
        layer_num {
            bindings = <
                &none     &none   &none  &none  &none                                                                               &none     &none    &none    &none  &none
                &none     &none   &none  &none  &none  &none                                                              &none     &none     &none    &none    &none  &none
                &none &kp COMMA  &kp N7 &kp N8 &kp N9  &kp N0                                                             &none     &none     &none    &none    &none  &none
                &none  &kp SEMI  &kp N4 &kp N5 &kp N6  &kp EQUAL                                                          &none &kp RSHFT &kp RCTRL &kp RALT &kp RGUI  &none
                &none &kp GRAVE  &kp N1 &kp N2 &kp N3  &kp BSLH  &kp MINUS  &kp PLUS  &kp FSLH    &none  &none  &none     &none     &none     &none    &none    &none  &none
 &magic LAYER_Magic 0     &none   &none  &none  &none            &kp SPACE   &kp DOT  &kp STAR    &none  &none  &none               &none     &none    &none    &none  &none
            >;
        };

        layer_sym {
            bindings = <
                &none         &none       &none      &none      &none                                                                                &none     &none    &none    &none  &none
                &none         &none       &none      &none      &none       &none                                                          &none     &none     &none    &none    &none  &none
                &none    &kp LS(N9)  &kp LS(N7) &kp LS(N8) &kp LS(N9)  &kp LS(N0)                                                          &none     &none     &none    &none    &none  &none
                &none  &kp LS(SEMI)  &kp LS(N4) &kp LS(N5) &kp LS(N6)  &kp LS(EQUAL)                                                       &none &kp RSHFT &kp RCTRL &kp RALT &kp RGUI  &none
                &none &kp LS(GRAVE)  &kp LS(N1) &kp LS(N2) &kp LS(N3)  &kp LS(BSLH)    &kp LT   &kp GT &kp LBRC    &none  &none  &none     &none     &none     &none    &none    &none  &none
 &magic LAYER_Magic 0         &none       &none      &none      &none                &kp LBKT &kp RBKT &kp RBRC    &none  &none  &none               &none     &none    &none    &none  &none
            >;
        };
        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };
};
